#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;
use Check::SimpleJob;
use Check::CondorLog;

my $firstappend_condor_config = '
	DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
	NUM_CPUS = 12
	ALL_DEBUG = 
';

my $negotiatorcycle = 5;
my $nextappend_condor_config = '
	DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
	ALL_DEBUG = 
	XSW_LIMIT = 2
	CONCURRENCY_LIMIT_DEFAULT = 2
	CONCURRENCY_LIMIT_DEFAULT_SMALL = 5
	CONCURRENCY_LIMIT_DEFAULT_LARGE = 2
	NEGOTIATOR_INTERVAL = 5
	NUM_CPUS = 12
';

CondorTest::StartCondorWithParams(
    append_condor_config => $firstappend_condor_config
);

my $append_submit_commands = '
concurrency_limits = XSW;
';

my $on_abort = sub {
	CondorTest::debug("Abort from removing sleep 0 jobs.\n",1);
};

my $on_evictedwitoutcheckpoint = sub {
	CondorTest::debug("Evicted Without Checkpoint from removing sleep 0 jobs.\n",1);
};

my $testname = "job_concurrency_limits.run";
my $result = 0;
my $running_now = 0;
my $expect_idle = 0;
my $expect_run = 0;

my $on_match = sub {
	my $response = shift;
	if($response eq "HitRetryLimit") {
		print "About to fail from timeout!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
	}
};

my $on_execute = sub {
my $idles = 0;
	print "Running now has value <$running_now>\n";
	$running_now += 1;
	CondorTest::debug("Job started running.\n",1);
	# compare current running to expected total
	if($running_now == $expect_run) {
		# if we expect no idle jobs, don't check.
		# remove jobs and return
		if($expect_idle == 0) {
			runcmd("condor_rm -all");
		} else {
			$idles = CountIdle($expect_idle);
			if($idles == $expect_idle) {
				print "Will another job start up? Better not.\n";
				# Started Negotiation Cycle
				CondorLog::RunCheckMultiple(
					daemon => "Negotiator",
					match_regexp => "Started Negotiation Cycle",
					match_instances => 2,
					match_callback => $on_match,
					match_timeout => 30,
					match_new => "true"
				);
				print "About to remove these jobs\n";
				system("condor_q");
				runcmd("condor_rm -all");
			}
		}
	} else {
		print "running $running_now expecting $expect_run: not removing jobs\n";
	}

	if($running_now > $expect_run) {
		die "Running jobs <$running_now> exceeded concurrency lints <$expect_run>\n";
	}
};

# enter most slots needed. We will verify
my $neededslots = 7;
my $haveslots = ExamineSlots($neededslots);

if($haveslots < $neededslots) {
	print "We need <$neededslots> but only have <$haveslots>\n";
	system("condor_config_val -dump | sort");
	system("condor_config_val -v NUM_CPUS");
	die "We need <$neededslots> but only have <$haveslots>\n";
}

#Do a couple things before setting currency limits
print "First test basic job\n";
$result = SimpleJob::RunCheck();

# then test behaviour of non cuncurrency jobs first
# all from each batch should run. Remove and do next set.
my $count = 0;
$running_now = 0;
$expect_run = 3;
$expect_idle = 0;
$result = SimpleJob::RunCheck(
	on_abort => $on_abort,
	on_evictedwithoutcheckpoint => $on_evictedwithoutcheckpoint,
	on_execute => $on_execute,
	queue_sz => 3,
	duration => 0,
	timeout => 600,
	append_submit_commands => $append_submit_commands
);
print "First test basic job. 3 jobs no concurrency settings\n";
if($result == 1) {
	print "ok\n";
} else {
	print "bad\n";
}

# clean queue bwtween all checks

ExamineQueue();

# OK turn it on with concurrency limits
CondorTest::StartCondorWithParams(
    append_condor_config => $nextappend_condor_config,
	local_fresh => "TRUE",
);

print "Test specified concurrency\n";
$running_now = 0;
$expect_run = 2;
$expect_idle = 1;
$result = SimpleJob::RunCheck(
	on_abort => $on_abort,
	on_evictedwithoutcheckpoint => $on_evictedwithoutcheckpoint,
	on_execute => $on_execute,
	queue_sz => 3,
	duration => 0,
	timeout => 600,
	append_submit_commands => $append_submit_commands
);
print "Test specified concurrency\n";
if($result == 1) {
	print "ok\n";
} else {
	print "bad\n";
}

# clean queue bwtween all checks

ExamineQueue();

my $append_submit_commands = '
concurrency_limits = UNDEFINED:2;
';

print "Test default concurrency and colon usage spec\n";
$running_now = 0;
$expect_run = 1;
$expect_idle = 1;
$result = SimpleJob::RunCheck(
	on_abort => $on_abort,
	on_evictedwithoutcheckpoint => $on_evictedwithoutcheckpoint,
	on_execute => $on_execute,
	queue_sz => 2,
	duration => 0,
	timeout => 600,
	append_submit_commands => $append_submit_commands
);
print "Test default concurrency and colon usage spec\n";
if($result == 1) {
	print "ok\n";
} else {
	print "bad\n";
}

# clean queue bwtween all checks

ExamineQueue();

my $append_submit_commands = '
concurrency_limits = large.license;
';

$running_now = 0;
$expect_run = 2;
$expect_idle = 1;
$result = SimpleJob::RunCheck(
	on_abort => $on_abort,
	on_evictedwithoutcheckpoint => $on_evictedwithoutcheckpoint,
	on_execute => $on_execute,
	queue_sz => 3,
	duration => 0,
	timeout => 600,
	append_submit_commands => $append_submit_commands
);
print "Test class default\n";
if($result == 1) {
	print "ok\n";
} else {
	print "bad\n";
}

# clean queue bwtween all checks



ExamineQueue();

my $append_submit_commands = '
concurrency_limits = small.license;
';

$running_now = 0;
$expect_run = 5;
$expect_idle = 2;
$result = SimpleJob::RunCheck(
	on_abort => $on_abort,
	on_evictedwithoutcheckpoint => $on_evictedwithoutcheckpoint,
	on_execute => $on_execute,
	queue_sz => 7,
	duration => 0,
	timeout => 600,
	append_submit_commands => $append_submit_commands
);
print "Test class default\n";
if($result == 1) {
	print "ok\n";
} else {
	print "bad\n";
}

# clean queue bwtween all checks

ExamineQueue();

CondorTest::EndTest();


sub CountIdle
{
	my $expectidle = shift;
	my $idlecount = 0;
	my $line = "";

	#runcmd("condor_q");
	my @jobs = `condor_q`;
	foreach my $job (@jobs) {
		chomp($job);
		$line = $job;
		print "JOB: $line\n";
		if($line =~ /^.*?\sI\s.*$/) {
			$idlecount += 1;
			print "Idle count now <$idlecount>, expecting <$expectidle>\n";
		}
	}
	if($idlecount != $expectidle) {
		die "Expected $expectidle idle but found $idlecount - die\n";
	}

	return($idlecount);
}

sub ExamineSlots
{
	my $waitforit = shift;
	my $line = "";

	my @jobs = ();
	my $available = 0;
	my $looplimit = 24;
	my $count = 24; # go just once
	if(defined $waitforit) {
		$count = 0; #enable looping with 10 second sleep
	}
	while($count <= $looplimit) {
		$count += 1;
		@jobs = ();
		@jobs = `condor_status`;
		foreach my $job (@jobs) {
			chomp($job);
			$line = $job;
			if($line =~ /^\s*Total\s+(\d+)\s*(\d+)\s*(\d+)\s*(\d+).*/) {
				print "<$4> unclaimed <$1> Total slots\n";
				$available = $4;
			}
		}
		if(defined $waitforit) {
			if($available >= $waitforit) {
				last;
			} else {
				sleep 10;
			}
		} else{
		}
	}
	return($available);
}

sub ExamineQueue
{
	my $line = "";

	print "\nExpecting all jobs to be gone. Lets See.\n";
	runcmd("condor_q");
	my @jobs = `condor_q`;
	foreach my $job (@jobs) {
		chomp($job);
		$line = $job;
		print "JOB: $line\n";
		if($line =~ /^\s*(\d+)\s*jobs; .*$/) {
			$idlecount += 1;
			print "<$1> jobs still running\n";
		}
	}
	print "Total slots available here:\n\n";
	system("condor_status");
}
