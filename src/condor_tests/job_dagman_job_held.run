#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_job_held.dag';
$testdesc =  'Condor submit dag - job held test - scheduler U';
$testname = "job_dagman_job_held";
$dagman_args = "-verbose";

@logfiles = ("job_dagman_job_held.dag.dagman.out");

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

# Get rid of any existing log files.
foreach $name (@logfiles) {
	if (-e $name) {
		runcmd("rm -f $name");
	}
}

$abnormal = sub 
{
	die "Want to see only submit, execute and unsuccessful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and unsuccessful completion\n",1);
};

$success = sub
{
	die "Error: DAG should fail!\n";
};

$failure = sub
{
	CondorTest::debug("DAG failed as expected\n",1);
	CondorTest::debug("Verifying output\n",1);

	$diditpass = 1;

	# Check for correct number of holds for each node job.
	foreach $name (@logfiles) {
		$line = "";
		$passed = 0;
		$nodeAHeld = 0;
		$nodeBHeld = 0;
		$canopen = open(OUT,"<$name");
		if( ! (defined $canopen)) {
			CondorTest::debug("Can not open logfile<$name>:$!\n",1);
			$diditpass = 0;
		}
		while(<OUT>) {
			chomp();
			$line = $_;

			if( $line =~ /ULOG_JOB_HELD.*Node A/ ) {
				CondorTest::debug("$name: $line\n",1);
				$passed = 1;
				$nodeAHeld++;
			} elsif ( $line =~ /ULOG_JOB_HELD.*Node B/ ) {
				CondorTest::debug("$name: $line\n",1);
				$passed = 1;
				$nodeBHeld++;
			}
		}
		close(OUT);
		if ( $nodeAHeld != 2 ) {
			CondorTest::debug("failed incorrect Node A hold count $nodeAHeld\n",1);
			$diditpass = 0;
		} elsif ( $nodeBHeld < 2 && $nodeBHeld > 3 ) {
			CondorTest::debug("failed incorrect Node B hold count $nodeBHeld\n",1);
			$diditpass = 0;
		} else {
			;
		}
	}

	if($diditpass == 0) {
		die "All expected files and correct output failed\n";
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterExitedFailure( $testname, $failure );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

